{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-3278102-14","tagline":"Python library for parsing and generation of different configuration file formats","body":"``` This is a project deep in development, not yet ready for production use ```\r\n\r\nReconfigure is an ORM for your config files. Direct translation of file into a Python objects and back makes it easy to do any kind of reconfiguration.\r\nYou can even extend reconfigure with your own classes for your custom configuration files!\r\n\r\nQuick example:\r\n\r\n```python\r\n>>> from reconfigure.configs import FSTabConfig\r\n>>> from reconfigure.builders.fstab import FilesystemBuilder\r\n>>> config = FSTabConfig(path='/etc/fstab')\r\n>>> config.load()\r\n>>> print config.tree\r\n{\r\n    filesystems [\r\n        {\r\n            type proc\r\n            device proc\r\n            mountpoint /proc\r\n            freq 0\r\n            passno 0\r\n            options nodev,noexec,nosuid\r\n        }, \r\n        {\r\n            type ext4\r\n            device UUID=83810b56-ef4b-44de-85c8-58dc589aef48\r\n            mountpoint /\r\n            freq 0\r\n            passno 1\r\n            options errors=remount-ro\r\n        }\r\n    ]\r\n}\r\n>>> config.tree.filesystems[1].device = '/dev/sda1'\r\n>>> fs = FilesystemBuilder.empty()\r\n>>> fs.device = '/dev/sdb1'\r\n>>> fs.mountpoint = '/mnt/temp'\r\n>>> config.tree.filesystems.append(fs)\r\n>>> config.save()\r\n>>> print open('/etc/fstab').read()\r\nproc    /proc   proc    nodev,noexec,nosuid     0       0\r\n/dev/sda1       /       ext4    errors=remount-ro       0       1\r\n/dev/sdb1       /mnt/temp   none none none none\r\n```\r\n\r\n### Config support so far\r\n\r\n* /etc/fstab\r\n* /etc/resolv.conf\r\n* /etc/hosts\r\n* [Ajenti](http://ajenti.org)\r\n* nginx\r\n\r\n### How it works\r\n\r\nThe processing chain consists of three main components:\r\n\r\n#### Parser\r\n\r\nThe parser transforms the raw text config into a Node Tree, which only represents structure of the config file. This is awfully similar to Abstract Syntax Trees.\r\nExample:\r\n```python\r\n>>> from reconfigure.parsers import NginxParser\r\n>>> parser = NginxParser()\r\n>>> content = open('/etc/nginx/nginx.conf').read()\r\n>>> print content \r\nuser www-data;\r\nworker_processes 4;\r\npid /var/run/nginx.pid;\r\n\r\nevents {\r\n        worker_connections 768;\r\n}\r\n\r\nhttp {\r\n        sendfile on;\r\n        tcp_nopush on;\r\n        tcp_nodelay on;\r\n        keepalive_timeout 65;\r\n        types_hash_max_size 2048;\r\n        include /etc/nginx/mime.types;\r\n        default_type application/octet-stream;\r\n        access_log /var/log/nginx/access.log;\r\n        error_log /var/log/nginx/error.log;\r\n        gzip on;\r\n        gzip_disable \"msie6\";\r\n        include /etc/nginx/conf.d/*.conf;\r\n        include /etc/nginx/sites-enabled/*;\r\n}\r\n\r\n>>> print parser.parse(content)\r\n(None)\r\n        user = www-data\r\n        worker_processes = 4\r\n        pid = /var/run/nginx.pid\r\n        (events)\r\n                worker_connections = 768\r\n        (http)\r\n                sendfile = on\r\n                tcp_nopush = on\r\n                tcp_nodelay = on\r\n                keepalive_timeout = 65\r\n                types_hash_max_size = 2048\r\n                include = /etc/nginx/mime.types\r\n                default_type = application/octet-stream\r\n                access_log = /var/log/nginx/access.log\r\n                error_log = /var/log/nginx/error.log\r\n                gzip = on\r\n                gzip_disable = \"msie6\"\r\n                include = /etc/nginx/conf.d/*.conf\r\n                include = /etc/nginx/sites-enabled/*\r\n```\r\n\r\nThe Node Trees have the same format for every config, so Parsers abstract us away from the file format.\r\n\r\n#### Includer\r\n\r\nIncluders handle the include directives in configs and track which statement belongs to which file.\r\nLet's continue from the previous example:\r\n\r\n```python\r\n>>> nodetree = parser.parse()\r\n\r\n>>> from reconfigure.includers import NginxIncluder\r\n>>> includer = NginxIncluder(parser=parser)\r\n>>> nodetree includer.compose('/etc/nginx/nginx.conf', nodetree)\r\n>>> print nodetree\r\n(None)\r\n        user = www-data\r\n        worker_processes = 4\r\n        pid = /var/run/nginx.pid\r\n        (events)\r\n                worker_connections = 768\r\n        (http)\r\n                sendfile = on\r\n                tcp_nopush = on\r\n                tcp_nodelay = on\r\n                keepalive_timeout = 65\r\n                types_hash_max_size = 2048\r\n                <include> /etc/nginx/mime.types\r\n                default_type = application/octet-stream\r\n                access_log = /var/log/nginx/access.log\r\n                error_log = /var/log/nginx/error.log\r\n                <include> /etc/nginx/conf.d/*.conf\r\n                <include> /etc/nginx/sites-enabled/*\r\n\r\n                ....\r\n\r\n                (server)\r\n                        root = /srv/wp\r\n                        index = index.php index.htm\r\n                        server_name = localhost\r\n                        (location /)\r\n                                root = /srv/wp\r\n                        (location ~ \\.php$)\r\n                                fastcgi_pass = 127.0.0.1:9000\r\n                                fastcgi_index = index.php\r\n                                <include> fastcgi_params\r\n                                fastcgi_param = QUERY_STRING            $query_string\r\n                                fastcgi_param = REQUEST_METHOD          $request_method\r\n                ....\r\n```\r\n\r\nYou can see that include directives has been converted into special \"include nodes\" and all relevant files has been recursively parsed and included.\r\n\r\n\r\n#### Builder\r\nBuilders are the most important components: they convert Node Tree into the final objects\r\n\r\n_Note: not all nodes are recognized so far_\r\n\r\n\r\n```python\r\n>>> from reconfigure.builders import NginxBuilder\r\n>>> NginxBuilder().build(nodetree)\r\n{\r\n    http {\r\n        servers [\r\n            {\r\n                server_names ['localhost']\r\n                root /srv/wp\r\n                locations [\r\n                    {\r\n                        pattern /\r\n                        root /srv/wp\r\n                    }, \r\n                    {\r\n                        pattern ~ \\.php$\r\n                        root None\r\n                    }\r\n                ]\r\n            }, \r\n            {\r\n                server_names ['d.local', 'd.local.info', 'd.wifi']\r\n                root None\r\n                locations [\r\n            ......\r\n```","name":"Reconfigure"}